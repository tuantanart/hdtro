
import React, { useState, useCallback } from 'react';
import { DataInputForm } from './components/DataInputForm';
import { DataTable } from './components/DataTable';
import { InvoiceModal } from './components/InvoiceModal';
import { Spinner } from './components/Spinner';
import type { RoomData, PaymentInfo } from './types';
import { getGoogleSheetDataUrl, parseGvizJson, parseA1Notation, parseGidFromUrl } from './utils/sheetUtils';

export default function App(): React.ReactNode {
  const [isLoadingData, setIsLoadingData] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [tableData, setTableData] = useState<RoomData[] | null>(null);
  const [paymentInfo, setPaymentInfo] = useState<PaymentInfo | null>(null);
  const [selectedRoom, setSelectedRoom] = useState<RoomData | null>(null);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);

  const handleFormSubmit = useCallback(async (sheetUrl: string, rangeStr: string, pInfo: PaymentInfo) => {
    setIsLoadingData(true);
    setError(null);
    setTableData(null);

    const gid = parseGidFromUrl(sheetUrl);

    const range = parseA1Notation(rangeStr);
    if (!range) {
        setError(`ƒê·ªãnh d·∫°ng v√πng d·ªØ li·ªáu '${rangeStr}' kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng ƒë·ªãnh d·∫°ng nh∆∞ 'A1:K29'.`);
        setIsLoadingData(false);
        return;
    }

    const dataUrl = getGoogleSheetDataUrl(sheetUrl, range, gid);
    if (!dataUrl) {
      setError('Link Google Sheet kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      setIsLoadingData(false);
      return;
    }
    
    setPaymentInfo(pInfo);

    try {
      const response = await fetch(dataUrl);
      if (!response.ok) {
        if (response.status === 404 || response.status === 400) {
             throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu (l·ªói ${response.status}). Vui l√≤ng ki·ªÉm tra l·∫°i:\n1. Link Google Sheet c√≥ ch√≠nh x√°c kh√¥ng.\n2. V√πng d·ªØ li·ªáu (vd: A1:K29) c√≥ h·ª£p l·ªá kh√¥ng.\n3. Quy·ªÅn truy c·∫≠p c·ªßa Sheet ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† 'B·∫•t k·ª≥ ai c√≥ ƒë∆∞·ªùng li√™n k·∫øt'.\n\nüí° M·∫πo: ƒê·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông, h√£y th·ª≠ 'T·ªáp' > 'Chia s·∫ª' > 'Xu·∫•t b·∫£n l√™n web'.`);
        }
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. M√£ l·ªói: ${response.status}`);
      }
      
      const responseText = await response.text();
      
      const jsonpRegex = /google\.visualization\.Query\.setResponse\(([\s\S]*)\)/;
      const match = responseText.match(jsonpRegex);

      if (!match || !match[1]) {
        throw new Error("Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Google. Vui l√≤ng ki·ªÉm tra l·∫°i Link v√† quy·ªÅn truy c·∫≠p c·ªßa Sheet.");
      }

      const jsonString = match[1];
      const jsonData = JSON.parse(jsonString);

      if (jsonData.status === 'error') {
        const errorMessage = jsonData.errors?.map((e: any) => e.detailed_message || e.message).join('\n') || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ Google API.';
        throw new Error(`L·ªói t·ª´ Google Sheets:\n${errorMessage}`);
      }
      
      const parsedData = parseGvizJson(jsonData);

      if (parsedData.length === 0) {
        setError("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c√≥ th·ªÉ x·ª≠ l√Ω trong v√πng b·∫°n ch·ªçn. H√£y ƒë·∫£m b·∫£o v√πng d·ªØ li·ªáu kh√¥ng b·ªã tr·ªëng v√† c√≥ c√°c c·ªôt c·∫ßn thi·∫øt.");
      } else {
        setTableData(parsedData);
      }

    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : 'ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra.';
      if (e instanceof SyntaxError) {
        setError("L·ªói ph√¢n t√≠ch d·ªØ li·ªáu: Ph·∫£n h·ªìi t·ª´ Google kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i link, v√πng d·ªØ li·ªáu v√† quy·ªÅn truy c·∫≠p c·ªßa Sheet.");
      } else {
        setError(errorMessage);
      }
      console.error(e);
    } finally {
      setIsLoadingData(false);
    }
  }, []);

  const handleGenerateInvoice = useCallback((roomData: RoomData) => {
    if (!paymentInfo) {
      setError('Vui l√≤ng nh·∫≠p th√¥ng tin thanh to√°n tr∆∞·ªõc.');
      return;
    }
    
    setSelectedRoom(roomData);
    setIsModalOpen(true);
    setError(null);

  }, [paymentInfo]);

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedRoom(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 font-sans p-4 sm:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        <header className="text-center mb-10 print:hidden">
          <h1 className="text-4xl sm:text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-teal-400">
            Tr√¨nh T·∫°o H√≥a ƒê∆°n Ti·ªÅn Tr·ªç
          </h1>
          <p className="mt-2 text-lg text-gray-600 dark:text-gray-400">
            T·ª± ƒë·ªông t·∫°o h√≥a ƒë∆°n t·ª´ Google Sheet m·ªôt c√°ch nhanh ch√≥ng v√† ch√≠nh x√°c.
          </p>
        </header>
        
        <main className="print:hidden">
          <DataInputForm onSubmit={handleFormSubmit} isLoading={isLoadingData} />

          {isLoadingData && (
            <div className="mt-8 flex justify-center">
              <Spinner className="h-8 w-8 text-blue-500" />
            </div>
          )}
          
          {error && (
            <div className="mt-8 text-center p-4 bg-red-100 dark:bg-red-900/20 border border-red-400 text-red-700 dark:text-red-300 rounded-lg whitespace-pre-line">
              {error}
            </div>
          )}

          {tableData && (
            <div className="mt-12">
              <DataTable data={tableData} onGenerateInvoice={handleGenerateInvoice} />
            </div>
          )}
        </main>
      </div>
      
      <InvoiceModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        roomData={selectedRoom}
        paymentInfo={paymentInfo}
      />
    </div>
  );
}